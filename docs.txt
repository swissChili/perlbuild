title
    perlbuild

description
    A generic build tool written in perl

  example
    This is an example of a build configuration utilizing both the features
    of the Runner and Builder classes:

        require './perlbuild.pm';

        my $gcc = Builder->new('gcc');
        my $run = Runner->new();

        $run->task('main', sub{
            my $static = $run->call('static');

            $gcc->from("main.c")
                ->from($static)
                ->indirect("header.h")
                ->build("main");
        });

        $run->task('static', sub{
            $gcc->from("static.c")->static("static");
        });

        $run->run();

  builder class
    Builder->new(source)
        This function creates a new instance of the GCC Builder class. The
        returned instance has several methods useful for compiling generic
        programs. Source is used as an initial source file

    builder->link(library)
        Adds a dynamic library to the list of libs to link. This, like all
        methods in perlbuild does not actually build when it is called, but
        rather set up parameters for a build method to use later. See
        "static" or "build" for more info.

    builder->from(source)
        Add a source to the builder. Can be either a source file or a static
        library. Can receive the return from the builder->static method as
        an argument to use that generated library.

    builder->indirect(source)
        Adds an indirect sources -- one that is watched for changes, but not
        directly given to the compiler. Useful for watching header files and
        other imports for changes.

    builder->static(target)
        Compile the sources to a static library to be linked either with
        builder->from or manually. Returns the relative path to the lib
        including the build dir so it can be passed directly to another
        builder as a source.

    builder->build(target)
        Compiles the sources to a binary target. Links static and dynamic
        libraries. Returns the path to the generated binary

  runner class
    The runner class provides an added layer of abstraction. Instead of
    simply executing some instructions for the builder as soon as the build
    script is run, the runner can be used to set specific tasks which can be
    executed either via command line arguments, or through the 'call'
    method.

    Runner->new()
        Creates a new Runner. Takes no arguments

    runner->task(command, callback)
        Adds a task that responds to a command and calls a subroutine. The
        data returned from the subroutine is returned only when it is called
        from within the build script.

    runner->call(command)
        Call a task from within a build script. Returns whatever the
        subroutine returns. Useful for incremental building steps and
        returning builders.

